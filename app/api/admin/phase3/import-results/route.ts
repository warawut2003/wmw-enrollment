// app/api/admin/phase3/import-results/route.ts

import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { Prisma, ApplicationStatus } from '@prisma/client';
import * as xlsx from 'xlsx';

export async function POST(request: Request) {
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  const session = await getServerSession(authOptions);
  if (!session?.user || session.user.role !== 'ADMIN') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const formData = await request.formData();
    const file = formData.get('resultsFile') as File | null;

    if (!file) {
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }

    // 2. ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ Parse ‡πÑ‡∏ü‡∏•‡πå Excel
    const buffer = await file.arrayBuffer();
    const workbook = xlsx.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const records: any[] = xlsx.utils.sheet_to_json(sheet);

    if (records.length === 0) {
      return NextResponse.json({ error: 'Excel file is empty' }, { status: 400 });
    }

    let updatedCount = 0;
    let rank = 1; // üí° ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 1

    // 3. ---- ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å) ----
    await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
      
      // 3.1 (Optional ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤ prorityRank ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£) ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏•‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏™ 2
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
      const activeYear = await tx.academicYear.findFirst({ where: { isActive: true }});
      if(activeYear) {
        await tx.application.updateMany({
            where: { academicYearId: activeYear.id },
            data: {
                prorityRank: null, // ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ELIGIBLE_FOR_EXAM)
            }
        });
      }

      // 3.2 ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô Excel
      for (const record of records) {
        // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô')
        const nationalId = record['‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô']?.toString();

        if (!nationalId) {
          throw new Error(`‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rank + 1}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'`);
        }

        // 5. üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        // 1-30 = ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à), 31-80 = ‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏£‡∏≠‡∏á
        const newStatus: ApplicationStatus = (rank <= 30) 
            ? 'AWAITING_PHASE3_DECISION' 
            : 'WAITING_LIST';

        // 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        try {
            await tx.application.update({
                where: { nationalId: nationalId },
                data: {
                    prorityRank: rank, // üí° ‡πÉ‡∏™‡πà‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà
                    applicationStatus: newStatus, // üí° ‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
                },
            });
        } catch (error: any) {
             if (error.code === 'P2025') { 
                // P2025 ‡∏Ñ‡∏∑‡∏≠ "Record to update not found"
                throw new Error(`‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${rank + 1}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ${nationalId} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`);
             }
             throw error; // ‡πÇ‡∏¢‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        }

        updatedCount++;
        rank++; // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
      } // end loop
    }); // ---- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Transaction ----

    // 7. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    return NextResponse.json(
      { message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏ü‡∏™ 3) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${updatedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£` },
      { status: 200 }
    );

  } catch (error: any) {
    console.error("Failed to import results:", error);

    // 8. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
    let errorMessage = "An unexpected error occurred.";
    if (error.message.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô')) {
        errorMessage = error.message; // ‡∏™‡πà‡∏á Error ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á
    }

    return NextResponse.json({ error: errorMessage, details: error.message }, { status: 500 });
  }
}