// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
}

enum ApplicationStatus {
  AWAITING_PHASE2_DOCS     // รอเอกสารยืนยันสิทธิ์สอบ
  PENDING_APPROVAL         // รอตรวจสอบเอกสาร
  ELIGIBLE_FOR_EXAM        // มีสิทธิ์สอบ
  AWAITING_PHASE3_DECISION // รอการตัดสินใจ (ยืนยัน/สละสิทธิ์)
  CONFIRMED                // ยืนยันสิทธิ์แล้ว (รอตรวจเอกสารมอบตัว)
  WITHDRAWN                // สละสิทธิ์
  ENROLLED                 // มอบตัวสำเร็จ
  INCORRECT_DOCS          // เอกสารไม่ถูกต้อง
  WAITING_LIST             // รอเรียกยืนยันสิทธิ์ (ตัวสำรอง)
  NO_ACTION                // ไม่ดำเนินการ
}

enum DocumentType {
  PHASE2_PAYMENT_SLIP      // สลิปชำระเงิน
  PHASE2_CONFIRMATION      // เอกสารยืนยันสิทธิ์สอบ
  PHASE3_CONSENT          // หนังสือยืนยันสิทธิ์
  PHASE3_CONTRACT         // สัญญามอบตัว
  PHASE3_ENROLLMENT       // ใบมอบตัว
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}


model AcademicYear {
  id        Int      @id @default(autoincrement())
  year      Int      @unique // เช่น 2568, 2569
  name      String   // เช่น "การรับสมัครปีการศึกษา 2568"
  isActive  Boolean  @default(false) // ✨ สำคัญมาก: ใช้บอกว่าปีไหนคือปีปัจจุบัน

  phase2StartDate DateTime?
  phase2EndDate   DateTime?
  phase3StartDate DateTime?
  phase3EndDate   DateTime?

  // Relation: หนึ่งปีการศึกษามีได้หลายใบสมัคร
  applications Application[]
}

model User {
  id String  @id @default(cuid())
  email String  @unique
  emailVerified DateTime?
  password  String
  role Role @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  application Application?
}

model Application {
  id  String  @id @default(cuid())
  nationalId  String  @unique
  laserCode   String?
  title     String 
  firstName String
  middleName  String?
  lastName  String
  dateOfBirth   DateTime?
  email     String?
  gpaTotal  Float?
  gpaMath   Float?
  gpaScience Float?

  pdpaConsent         Boolean           @default(false)

  applicationStatus   ApplicationStatus @default(AWAITING_PHASE2_DOCS)
  prorityRank Int?
  enrollmentType      String?
  examVenue       String?
  examRoom            String?   
  seatNumber          String?   
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user        User?       @relation(fields: [userId], references: [id])
  userId      String?     @unique

  school School @relation(fields:[schoolId], references:[id])
  schoolId Int

  documents   Document[]

  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
}

model Document {
  id String @id @default(cuid())
  fileName String
  fileUrl  String
  documentType  DocumentType
  status  DocumentStatus @default(PENDING)
  rejectionReason String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  applicationId String
  application Application @relation(fields : [applicationId],references: [id])

  @@unique([applicationId, documentType])
}

model School {
  id Int @id @default(autoincrement())
  name  String @unique
  province String

  application Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  hashedPassword String
  nationalId     String
  laserCode      String?
  @@unique([identifier, token])
}
